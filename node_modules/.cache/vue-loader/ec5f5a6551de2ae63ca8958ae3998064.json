{"remainingRequest":"E:\\ApiAdmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ApiAdmin\\src\\view\\interface\\list.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ApiAdmin\\src\\view\\interface\\list.vue","mtime":1635783329010},{"path":"E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js","mtime":1635783561745},{"path":"E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635783567026},{"path":"E:\\ApiAdmin\\node_modules\\vue-loader\\lib\\index.js","mtime":1635783560295}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getList, changeStatus, add, edit, del, getHash, refresh } from '@/api/interface'\r\nimport { getAll } from '@/api/interface-group'\r\n\r\nconst editButton = (vm, h, currentRow, index) => {\r\n  if (vm.buttonShow.edit) {\r\n    return h('Button', {\r\n      props: {\r\n        type: 'primary'\r\n      },\r\n      style: {\r\n        margin: '0 5px'\r\n      },\r\n      on: {\r\n        'click': () => {\r\n          vm.formItem.id = currentRow.id\r\n          vm.formItem.api_class = currentRow.api_class\r\n          vm.formItem.info = currentRow.info\r\n          vm.formItem.method = currentRow.method\r\n          vm.formItem.hash = currentRow.hash\r\n          vm.formItem.group_hash = currentRow.group_hash\r\n          vm.formItem.access_token = currentRow.access_token\r\n          vm.formItem.is_test = currentRow.is_test\r\n          vm.formItem.hash_type = currentRow.hash_type\r\n          vm.modalSetting.show = true\r\n          vm.modalSetting.index = index\r\n        }\r\n      }\r\n    }, vm.$t('edit_button'))\r\n  }\r\n}\r\nconst deleteButton = (vm, h, currentRow, index) => {\r\n  if (vm.buttonShow.del) {\r\n    return h('Poptip', {\r\n      props: {\r\n        confirm: true,\r\n        title: '您确定要删除这条数据吗? ',\r\n        transfer: true\r\n      },\r\n      on: {\r\n        'on-ok': () => {\r\n          del(currentRow.hash).then(response => {\r\n            currentRow.loading = false\r\n            vm.tableData.splice(index, 1)\r\n            vm.$Message.success(response.data.msg)\r\n          })\r\n        }\r\n      }\r\n    }, [\r\n      h('Button', {\r\n        style: {\r\n          margin: '0 5px'\r\n        },\r\n        props: {\r\n          type: 'error',\r\n          placement: 'top',\r\n          loading: currentRow.isDeleting\r\n        }\r\n      }, vm.$t('delete_button'))\r\n    ])\r\n  }\r\n}\r\nconst requestButton = (vm, h, currentRow, index) => {\r\n  if (vm.buttonShow.request) {\r\n    return h('Button', {\r\n      style: {\r\n        margin: '0 5px'\r\n      },\r\n      props: {\r\n        type: 'info',\r\n        placement: 'top',\r\n        loading: currentRow.isDeleting\r\n      },\r\n      on: {\r\n        click: () => {\r\n          let hash = currentRow.hash\r\n          vm.$router.push({\r\n            path: `request/${hash}`\r\n          })\r\n        }\r\n      }\r\n    }, '请求参数')\r\n  }\r\n}\r\nconst responseButton = (vm, h, currentRow, index) => {\r\n  if (vm.buttonShow.response) {\r\n    return h('Button', {\r\n      style: {\r\n        margin: '0 5px'\r\n      },\r\n      props: {\r\n        type: 'warning',\r\n        placement: 'top',\r\n        loading: currentRow.isDeleting\r\n      },\r\n      on: {\r\n        click: () => {\r\n          let hash = currentRow.hash\r\n          vm.$router.push({\r\n            path: `response/${hash}`\r\n          })\r\n        }\r\n      }\r\n    }, '返回参数')\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'interface_list',\r\n  data () {\r\n    return {\r\n      confirmRefresh: false,\r\n      refreshLoading: false,\r\n      columnsList: [\r\n        {\r\n          title: '序号',\r\n          type: 'index',\r\n          width: 65,\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: '接口名称',\r\n          align: 'center',\r\n          minWidth: 190,\r\n          key: 'info'\r\n        },\r\n        {\r\n          title: '真实类库',\r\n          align: 'center',\r\n          key: 'api_class',\r\n          width: 230\r\n        },\r\n        {\r\n          title: '接口映射',\r\n          align: 'center',\r\n          key: 'hash',\r\n          width: 140\r\n        },\r\n        {\r\n          title: '请求方式',\r\n          align: 'center',\r\n          width: 95,\r\n          render: (h, params) => {\r\n            if (params.row.isTest === 1) {\r\n              return h('tag', {\r\n                attrs: {\r\n                  color: 'error'\r\n                }\r\n              }, '测试')\r\n            } else {\r\n              switch (params.row.method) {\r\n                case 1:\r\n                  return h('Tag', {\r\n                    attrs: {\r\n                      color: 'success'\r\n                    }\r\n                  }, 'POST')\r\n                case 2:\r\n                  return h('Tag', {\r\n                    attrs: {\r\n                      color: 'primary'\r\n                    }\r\n                  }, 'GET')\r\n                case 0:\r\n                  return h('Tag', {\r\n                    attrs: {\r\n                      color: 'warning'\r\n                    }\r\n                  }, '不限')\r\n              }\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '接口状态',\r\n          align: 'center',\r\n          width: 130,\r\n          render: (h, params) => {\r\n            let vm = this\r\n            return h('i-switch', {\r\n              attrs: {\r\n                size: 'large'\r\n              },\r\n              props: {\r\n                'true-value': 1,\r\n                'false-value': 0,\r\n                value: params.row.status,\r\n                disabled: !vm.buttonShow.changeStatus\r\n              },\r\n              on: {\r\n                'on-change': function (status) {\r\n                  changeStatus(status, params.row.hash).then(response => {\r\n                    vm.$Message.success(response.data.msg)\r\n                    vm.getList()\r\n                  })\r\n                }\r\n              }\r\n            }, [\r\n              h('span', {\r\n                slot: 'open'\r\n              }, vm.$t('open_choose')),\r\n              h('span', {\r\n                slot: 'close'\r\n              }, vm.$t('close_choose'))\r\n            ])\r\n          }\r\n        },\r\n        {\r\n          title: '操作',\r\n          align: 'center',\r\n          minWidth: 375,\r\n          render: (h, params) => {\r\n            return h('div', [\r\n              editButton(this, h, params.row, params.index),\r\n              requestButton(this, h, params.row, params.index),\r\n              responseButton(this, h, params.row, params.index),\r\n              deleteButton(this, h, params.row, params.index)\r\n            ])\r\n          }\r\n        }\r\n      ],\r\n      tableData: [],\r\n      apiGroup: [],\r\n      tableShow: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        listCount: 0\r\n      },\r\n      searchConf: {\r\n        type: '',\r\n        keywords: '',\r\n        status: ''\r\n      },\r\n      modalSetting: {\r\n        show: false,\r\n        loading: false,\r\n        index: 0\r\n      },\r\n      formItem: {\r\n        api_class: '',\r\n        info: '',\r\n        group_hash: 'default',\r\n        method: 2,\r\n        hash_type: 2,\r\n        hash: '',\r\n        access_token: 0,\r\n        is_test: 0,\r\n        id: 0\r\n      },\r\n      ruleValidate: {\r\n        api_class: [\r\n          { required: true, message: '真实类库不能为空', trigger: 'blur' }\r\n        ],\r\n        info: [\r\n          { required: true, message: '接口名称不能为空', trigger: 'blur' }\r\n        ]\r\n      },\r\n      buttonShow: {\r\n        edit: true,\r\n        request: true,\r\n        response: true,\r\n        del: true,\r\n        changeStatus: true\r\n      },\r\n      listLoading: false\r\n    }\r\n  },\r\n  created () {\r\n    let vm = this\r\n    vm.getList()\r\n    vm.hasRule('InterfaceList/edit').then(res => {\r\n      vm.buttonShow.edit = res\r\n    })\r\n    vm.hasRule('InterfaceList/del').then(res => {\r\n      vm.buttonShow.del = res\r\n    })\r\n    vm.hasRule('InterfaceList/changeStatus').then(res => {\r\n      vm.buttonShow.changeStatus = res\r\n    })\r\n    vm.hasRule('Fields/response').then(res => {\r\n      vm.buttonShow.response = res\r\n    })\r\n    vm.hasRule('Fields/request').then(res => {\r\n      vm.buttonShow.request = res\r\n    })\r\n    getAll().then(response => {\r\n      vm.apiGroup = response.data.data.list\r\n    })\r\n  },\r\n  activated () {\r\n    let vm = this\r\n    getAll().then(response => {\r\n      vm.apiGroup = response.data.data.list\r\n    })\r\n  },\r\n  methods: {\r\n    alertAdd () {\r\n      let vm = this\r\n      getHash().then(response => {\r\n        vm.formItem.hash = response.data.data.hash\r\n      })\r\n      vm.modalSetting.show = true\r\n    },\r\n    submit () {\r\n      let vm = this\r\n      this.$refs['myForm'].validate((valid) => {\r\n        if (valid) {\r\n          vm.modalSetting.loading = true\r\n          if (vm.formItem.id === 0) {\r\n            add(vm.formItem).then(response => {\r\n              vm.modalSetting.loading = false\r\n              vm.$Message.success(response.data.msg)\r\n              vm.getList()\r\n              vm.cancel()\r\n            }).catch(() => {\r\n              vm.modalSetting.loading = false\r\n            })\r\n          } else {\r\n            edit(vm.formItem).then(response => {\r\n              vm.modalSetting.loading = false\r\n              vm.$Message.success(response.data.msg)\r\n              vm.getList()\r\n              vm.cancel()\r\n            }).catch(() => {\r\n              vm.modalSetting.loading = false\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    cancel () {\r\n      this.modalSetting.show = false\r\n    },\r\n    changePage (page) {\r\n      this.tableShow.currentPage = page\r\n      this.getList()\r\n    },\r\n    changeSize (size) {\r\n      this.tableShow.pageSize = size\r\n      this.getList()\r\n    },\r\n    search () {\r\n      this.tableShow.currentPage = 1\r\n      this.getList()\r\n    },\r\n    getList () {\r\n      let vm = this\r\n      vm.listLoading = true\r\n      getList({\r\n        page: vm.tableShow.currentPage,\r\n        size: vm.tableShow.pageSize,\r\n        type: vm.searchConf.type,\r\n        keywords: vm.searchConf.keywords,\r\n        status: vm.searchConf.status\r\n      }).then(response => {\r\n        vm.tableData = response.data.data.list\r\n        vm.tableShow.listCount = response.data.data.count\r\n        vm.listLoading = false\r\n      })\r\n    },\r\n    doCancel (data) {\r\n      if (!data) {\r\n        this.formItem.id = 0\r\n        this.$refs['myForm'].resetFields()\r\n        this.modalSetting.loading = false\r\n        this.modalSetting.index = 0\r\n      }\r\n    },\r\n    refreshRoute () {\r\n      let vm = this\r\n      vm.refreshLoading = true\r\n      refresh().then(response => {\r\n        vm.$Message.success(response.data.msg)\r\n        vm.confirmRefresh = false\r\n        vm.refreshLoading = false\r\n      }).catch(() => {\r\n        vm.confirmRefresh = false\r\n        vm.refreshLoading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}