{"remainingRequest":"E:\\ApiAdmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ApiAdmin\\src\\components\\main\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ApiAdmin\\src\\components\\main\\main.vue","mtime":1635783328972},{"path":"E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js","mtime":1635783561745},{"path":"E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635783567026},{"path":"E:\\ApiAdmin\\node_modules\\vue-loader\\lib\\index.js","mtime":1635783560295}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport SideMenu from './components/side-menu'\r\nimport HeaderBar from './components/header-bar'\r\nimport TagsNav from './components/tags-nav'\r\nimport User from './components/user'\r\nimport ABackTop from './components/a-back-top'\r\nimport Fullscreen from './components/fullscreen'\r\nimport Language from './components/language'\r\nimport { mapMutations, mapActions } from 'vuex'\r\nimport { getNewTagList, routeEqual } from '@/libs/util'\r\nimport routers from '@/router/routers'\r\nimport minLogo from '@/assets/images/logo-min.jpg'\r\nimport maxLogo from '@/assets/images/logo.jpg'\r\nimport defaultImg from '@/assets/images/default-img.jpg'\r\nimport './main.less'\r\nexport default {\r\n  name: 'Main',\r\n  components: {\r\n    SideMenu,\r\n    HeaderBar,\r\n    Language,\r\n    TagsNav,\r\n    Fullscreen,\r\n    User,\r\n    ABackTop\r\n  },\r\n  data () {\r\n    return {\r\n      collapsed: false,\r\n      minLogo,\r\n      maxLogo,\r\n      isFullscreen: false\r\n    }\r\n  },\r\n  computed: {\r\n    tagNavList () {\r\n      return this.$store.state.app.tagNavList\r\n    },\r\n    userAvatar () {\r\n      return JSON.stringify(this.$store.state.user.userInfo) !== '{}' && this.$store.state.user.userInfo.userData.head_img ? this.$store.state.user.userInfo.userData.head_img : defaultImg\r\n    },\r\n    cacheList () {\r\n      return ['ParentView', ...this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []]\r\n    },\r\n    menuList () {\r\n      return this.$store.getters.menuList\r\n    },\r\n    local () {\r\n      return this.$store.state.app.local\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'setBreadCrumb',\r\n      'setTagNavList',\r\n      'addTag',\r\n      'setLocal',\r\n      'setHomeRoute',\r\n      'closeTag'\r\n    ]),\r\n    ...mapActions([\r\n      'handleLogin'\r\n    ]),\r\n    turnToPage (route) {\r\n      let { name, params, query } = {}\r\n      if (typeof route === 'string') name = route\r\n      else {\r\n        name = route.name\r\n        params = route.params\r\n        query = route.query\r\n      }\r\n      if (name.indexOf('isTurnByHref_') > -1) {\r\n        window.open(name.split('_')[1])\r\n        return\r\n      }\r\n      this.$router.push({\r\n        name,\r\n        params,\r\n        query\r\n      })\r\n    },\r\n    handleCollapsedChange (state) {\r\n      this.collapsed = state\r\n    },\r\n    handleCloseTag (res, type, route) {\r\n      if (type !== 'others') {\r\n        if (type === 'all') {\r\n          this.turnToPage('home')\r\n        } else {\r\n          if (routeEqual(this.$route, route)) {\r\n            this.closeTag(route)\r\n          }\r\n        }\r\n      }\r\n      this.setTagNavList(res)\r\n    },\r\n    handleClick (item) {\r\n      this.turnToPage(item)\r\n    }\r\n  },\r\n  watch: {\r\n    '$route' (newRoute) {\r\n      const { name, query, params, meta } = newRoute\r\n      this.addTag({\r\n        route: { name, query, params, meta },\r\n        type: 'push'\r\n      })\r\n      this.setBreadCrumb(newRoute)\r\n      this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\r\n      this.$refs.sideMenu.updateOpenName(newRoute.name)\r\n    }\r\n  },\r\n  mounted () {\r\n    /**\r\n     * @description 初始化设置面包屑导航和标签导航\r\n     */\r\n    this.setTagNavList()\r\n    this.setHomeRoute(routers)\r\n    const { name, params, query, meta } = this.$route\r\n    this.addTag({\r\n      route: { name, params, query, meta }\r\n    })\r\n    this.setBreadCrumb(this.$route)\r\n    // 设置初始语言\r\n    this.setLocal(this.$i18n.locale)\r\n    // 如果当前打开页面不在标签栏中，跳到homeName页\r\n    if (!this.tagNavList.find(item => item.name === this.$route.name)) {\r\n      this.$router.push({\r\n        name: 'home'\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}