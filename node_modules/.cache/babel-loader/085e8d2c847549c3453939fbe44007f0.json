{"remainingRequest":"E:\\ApiAdmin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js!E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\ApiAdmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ApiAdmin\\src\\view\\interface\\group.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ApiAdmin\\src\\view\\interface\\group.vue","mtime":1635783329009},{"path":"E:\\ApiAdmin\\.babelrc","mtime":1635783328909},{"path":"E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635783567026},{"path":"E:\\ApiAdmin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1635783565708},{"path":"E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js","mtime":1635783561745},{"path":"E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635783567026},{"path":"E:\\ApiAdmin\\node_modules\\vue-loader\\lib\\index.js","mtime":1635783560295}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getList as _getList, changeStatus, add, edit, del } from '@/api/interface-group';\nimport { baseUrl } from '@/libs/api.request';\nimport { getToken } from '@/libs/util';\nimport { getHash } from '@/api/interface';\n\nvar editButton = function editButton(vm, h, currentRow, index) {\n  if (vm.buttonShow.edit) {\n    return h('Button', {\n      props: {\n        type: 'primary'\n      },\n      style: {\n        margin: '0 5px'\n      },\n      on: {\n        'click': function click() {\n          vm.formItem.id = currentRow.id;\n          vm.formItem.name = currentRow.name;\n          vm.formItem.hash = currentRow.hash;\n          vm.formItem.image = currentRow.image;\n          vm.formItem.description = currentRow.description;\n          vm.modalSetting.show = true;\n          vm.modalSetting.index = index;\n        }\n      }\n    }, vm.$t('edit_button'));\n  }\n};\n\nvar deleteButton = function deleteButton(vm, h, currentRow, index) {\n  if (vm.buttonShow.del) {\n    return h('Poptip', {\n      props: {\n        confirm: true,\n        title: '您确定要删除此接口分组么? 如当前分组下仍有接口，将自动划归于默认分组！',\n        transfer: true\n      },\n      on: {\n        'on-ok': function onOk() {\n          del(currentRow.hash).then(function (response) {\n            vm.tableData.splice(index, 1);\n            vm.$Message.success(response.data.msg);\n          });\n          currentRow.loading = false;\n        }\n      }\n    }, [h('Button', {\n      style: {\n        margin: '0 5px'\n      },\n      props: {\n        type: 'error',\n        placement: 'top',\n        loading: currentRow.isDeleting\n      }\n    }, vm.$t('delete_button'))]);\n  }\n};\n\nexport default {\n  name: 'interface_group',\n  data: function data() {\n    var _this = this;\n\n    return {\n      uploadUrl: baseUrl + 'Index/upload',\n      uploadHeader: {\n        'Api-Auth': getToken()\n      },\n      columnsList: [{\n        title: '序号',\n        type: 'index',\n        width: 65,\n        align: 'center'\n      }, {\n        title: '接口组名称',\n        align: 'center',\n        key: 'name'\n      }, {\n        title: '接口组描述',\n        align: 'center',\n        key: 'description'\n      }, {\n        title: '接口组热度',\n        align: 'center',\n        width: 120,\n        render: function render(h, params) {\n          if (params.row.hot > 10000) {\n            var hot = (parseInt(params.row.hot) / 10000).toFixed(1) + '万';\n            return h('span', hot);\n          } else {\n            return h('span', params.row.hot);\n          }\n        }\n      }, {\n        title: '接口组标识',\n        align: 'center',\n        key: 'hash',\n        width: 140\n      }, {\n        title: '接口组状态',\n        align: 'center',\n        width: 110,\n        render: function render(h, params) {\n          var vm = _this;\n          return h('i-switch', {\n            attrs: {\n              size: 'large'\n            },\n            props: {\n              'true-value': 1,\n              'false-value': 0,\n              value: params.row.status,\n              disabled: !vm.buttonShow.changeStatus\n            },\n            on: {\n              'on-change': function onChange(status) {\n                changeStatus(status, params.row.id).then(function (response) {\n                  vm.$Message.success(response.data.msg);\n                  vm.getList();\n                });\n              }\n            }\n          }, [h('span', {\n            slot: 'open'\n          }, vm.$t('open_choose')), h('span', {\n            slot: 'close'\n          }, vm.$t('close_choose'))]);\n        }\n      }, {\n        title: '操作',\n        align: 'center',\n        width: 200,\n        render: function render(h, params) {\n          return h('div', [editButton(_this, h, params.row, params.index), deleteButton(_this, h, params.row, params.index)]);\n        }\n      }],\n      tableData: [],\n      tableShow: {\n        currentPage: 1,\n        pageSize: 10,\n        listCount: 0\n      },\n      searchConf: {\n        type: '',\n        keywords: '',\n        status: ''\n      },\n      modalSetting: {\n        show: false,\n        loading: false,\n        index: 0\n      },\n      formItem: {\n        description: '',\n        name: '',\n        hash: '',\n        image: '',\n        id: 0\n      },\n      ruleValidate: {\n        name: [{\n          required: true,\n          message: '接口组名称不能为空',\n          trigger: 'blur'\n        }]\n      },\n      buttonShow: {\n        edit: true,\n        del: true,\n        changeStatus: true\n      },\n      listLoading: false\n    };\n  },\n  created: function created() {\n    var vm = this;\n    vm.getList();\n    vm.hasRule('InterfaceGroup/edit').then(function (res) {\n      vm.buttonShow.edit = res;\n    });\n    vm.hasRule('InterfaceGroup/del').then(function (res) {\n      vm.buttonShow.del = res;\n    });\n    vm.hasRule('InterfaceGroup/changeStatus').then(function (res) {\n      vm.buttonShow.changeStatus = res;\n    });\n  },\n  methods: {\n    alertAdd: function alertAdd() {\n      var vm = this;\n      getHash().then(function (response) {\n        vm.formItem.hash = response.data.data.hash;\n      });\n      vm.modalSetting.show = true;\n    },\n    submit: function submit() {\n      var vm = this;\n      this.$refs['myForm'].validate(function (valid) {\n        if (valid) {\n          vm.modalSetting.loading = true;\n\n          if (vm.formItem.id === 0) {\n            add(vm.formItem).then(function (response) {\n              vm.$Message.success(response.data.msg);\n              vm.getList();\n              vm.cancel();\n            }).catch(function () {\n              vm.modalSetting.loading = false;\n            });\n          } else {\n            edit(vm.formItem).then(function (response) {\n              vm.$Message.success(response.data.msg);\n              vm.getList();\n              vm.cancel();\n            }).catch(function () {\n              vm.modalSetting.loading = false;\n            });\n          }\n        }\n      });\n    },\n    cancel: function cancel() {\n      this.modalSetting.show = false;\n    },\n    changePage: function changePage(page) {\n      this.tableShow.currentPage = page;\n      this.getList();\n    },\n    changeSize: function changeSize(size) {\n      this.tableShow.pageSize = size;\n      this.getList();\n    },\n    search: function search() {\n      this.tableShow.currentPage = 1;\n      this.getList();\n    },\n    getList: function getList() {\n      var vm = this;\n      vm.listLoading = true;\n\n      _getList({\n        page: vm.tableShow.currentPage,\n        size: vm.tableShow.pageSize,\n        type: vm.searchConf.type,\n        keywords: vm.searchConf.keywords,\n        status: vm.searchConf.status\n      }).then(function (response) {\n        vm.tableData = response.data.data.list;\n        vm.tableShow.listCount = response.data.data.count;\n        vm.listLoading = false;\n      });\n    },\n    handleImgFormatError: function handleImgFormatError(file) {\n      this.$Notice.warning({\n        title: '文件类型不合法',\n        desc: file.name + '的文件类型不正确，请上传jpg或者png图片。'\n      });\n    },\n    handleImgRemove: function handleImgRemove() {\n      this.formItem.image = '';\n    },\n    handleImgSuccess: function handleImgSuccess(response) {\n      if (response.code === 1) {\n        this.$Message.success(response.msg);\n        this.formItem.image = response.data.fileUrl;\n      } else {\n        this.$Message.error(response.msg);\n      }\n    },\n    handleImgMaxSize: function handleImgMaxSize(file) {\n      this.$Notice.warning({\n        title: '文件大小不合法',\n        desc: file.name + '太大啦请上传小于5M的文件。'\n      });\n    },\n    doCancel: function doCancel(data) {\n      if (!data) {\n        this.formItem.id = 0;\n        this.formItem.image = '';\n        this.$refs['myForm'].resetFields();\n        this.modalSetting.loading = false;\n        this.modalSetting.index = 0;\n      }\n    }\n  }\n};",null]}