{"remainingRequest":"E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js!E:\\ApiAdmin\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ApiAdmin\\src\\libs\\router-utils.js","dependencies":[{"path":"E:\\ApiAdmin\\src\\libs\\router-utils.js","mtime":1635783328982},{"path":"E:\\ApiAdmin\\.babelrc","mtime":1635783328909},{"path":"E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635783567026},{"path":"E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js","mtime":1635783561745},{"path":"E:\\ApiAdmin\\node_modules\\eslint-loader\\index.js","mtime":1635783566509}],"contextDependencies":[],"result":["/**\r\n * ①添\r\n * @@新增 定义初始化菜单\r\n */\nimport lazyLoading from \"./lazy-loading\";\nimport Main from '@/components/main'; // Main 是架构组件，不在后台返回，在文件里单独引入\n// 加载路由菜单,从localStorage拿到路由,在创建路由时使用\n\nexport var dynamicRouterAdd = function dynamicRouterAdd() {\n  var data = sessionStorage.getItem('dynamicRouter');\n\n  if (!data) {\n    return [];\n  }\n\n  return filterAsyncRouter(JSON.parse(data));\n}; // @函数: 遍历后台传来的路由字符串，转换为组件对象\n\nexport var filterAsyncRouter = function filterAsyncRouter(asyncRouterMap) {\n  var accessedRouters = [];\n\n  if (asyncRouterMap) {\n    asyncRouterMap.filter(function (route) {\n      if (route.show === 1) {\n        var accessedRouter = {};\n        accessedRouter.path = route.router;\n        accessedRouter.name = route.title;\n        accessedRouter.meta = {\n          icon: route.icon,\n          title: route.title,\n          hideInMenu: false\n        };\n\n        if (route.component === '') {\n          accessedRouter.component = Main;\n        } else {\n          if (route.component === 'interface/request' || route.component === 'interface/response') {\n            accessedRouter.meta.hideInMenu = true;\n          }\n\n          accessedRouter.component = lazyLoading(route.component);\n        }\n\n        if (route.children && route.children.length) {\n          accessedRouter.children = filterAsyncRouter(route.children);\n        }\n\n        accessedRouters.push(accessedRouter);\n      }\n    });\n  }\n\n  return accessedRouters;\n};",{"version":3,"sources":["E:/ApiAdmin/src/libs/router-utils.js"],"names":["lazyLoading","Main","dynamicRouterAdd","data","sessionStorage","getItem","filterAsyncRouter","JSON","parse","asyncRouterMap","accessedRouters","filter","route","show","accessedRouter","path","router","name","title","meta","icon","hideInMenu","component","children","length","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CAAqC;AAErC;;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,MAAIC,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuB,eAAvB,CAAX;;AACA,MAAI,CAACF,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AACD,SAAOG,iBAAiB,CAACC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAD,CAAxB;AACD,CANM,C,CAQP;;AACA,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACG,cAAD,EAAoB;AACnD,MAAIC,eAAe,GAAG,EAAtB;;AACA,MAAID,cAAJ,EAAoB;AAClBA,IAAAA,cAAc,CAACE,MAAf,CAAsB,UAAAC,KAAK,EAAI;AAC7B,UAAIA,KAAK,CAACC,IAAN,KAAe,CAAnB,EAAsB;AACpB,YAAIC,cAAc,GAAG,EAArB;AACAA,QAAAA,cAAc,CAACC,IAAf,GAAsBH,KAAK,CAACI,MAA5B;AACAF,QAAAA,cAAc,CAACG,IAAf,GAAsBL,KAAK,CAACM,KAA5B;AACAJ,QAAAA,cAAc,CAACK,IAAf,GAAsB;AACpBC,UAAAA,IAAI,EAAER,KAAK,CAACQ,IADQ;AAEpBF,UAAAA,KAAK,EAAEN,KAAK,CAACM,KAFO;AAGpBG,UAAAA,UAAU,EAAE;AAHQ,SAAtB;;AAKA,YAAIT,KAAK,CAACU,SAAN,KAAoB,EAAxB,EAA4B;AAC1BR,UAAAA,cAAc,CAACQ,SAAf,GAA2BrB,IAA3B;AACD,SAFD,MAEO;AACL,cAAIW,KAAK,CAACU,SAAN,KAAoB,mBAApB,IAA2CV,KAAK,CAACU,SAAN,KAAoB,oBAAnE,EAAyF;AACvFR,YAAAA,cAAc,CAACK,IAAf,CAAoBE,UAApB,GAAiC,IAAjC;AACD;;AACDP,UAAAA,cAAc,CAACQ,SAAf,GAA2BtB,WAAW,CAACY,KAAK,CAACU,SAAP,CAAtC;AACD;;AACD,YAAIV,KAAK,CAACW,QAAN,IAAkBX,KAAK,CAACW,QAAN,CAAeC,MAArC,EAA6C;AAC3CV,UAAAA,cAAc,CAACS,QAAf,GAA0BjB,iBAAiB,CAACM,KAAK,CAACW,QAAP,CAA3C;AACD;;AACDb,QAAAA,eAAe,CAACe,IAAhB,CAAqBX,cAArB;AACD;AACF,KAvBD;AAwBD;;AACD,SAAOJ,eAAP;AACD,CA7BM","sourcesContent":["/**\r\n * ①添\r\n * @@新增 定义初始化菜单\r\n */\r\nimport lazyLoading from './lazy-loading'\r\nimport Main from '@/components/main' // Main 是架构组件，不在后台返回，在文件里单独引入\r\n\r\n// 加载路由菜单,从localStorage拿到路由,在创建路由时使用\r\nexport const dynamicRouterAdd = () => {\r\n  let data = sessionStorage.getItem('dynamicRouter')\r\n  if (!data) {\r\n    return []\r\n  }\r\n  return filterAsyncRouter(JSON.parse(data))\r\n}\r\n\r\n// @函数: 遍历后台传来的路由字符串，转换为组件对象\r\nexport const filterAsyncRouter = (asyncRouterMap) => {\r\n  let accessedRouters = []\r\n  if (asyncRouterMap) {\r\n    asyncRouterMap.filter(route => {\r\n      if (route.show === 1) {\r\n        let accessedRouter = {}\r\n        accessedRouter.path = route.router\r\n        accessedRouter.name = route.title\r\n        accessedRouter.meta = {\r\n          icon: route.icon,\r\n          title: route.title,\r\n          hideInMenu: false\r\n        }\r\n        if (route.component === '') {\r\n          accessedRouter.component = Main\r\n        } else {\r\n          if (route.component === 'interface/request' || route.component === 'interface/response') {\r\n            accessedRouter.meta.hideInMenu = true\r\n          }\r\n          accessedRouter.component = lazyLoading(route.component)\r\n        }\r\n        if (route.children && route.children.length) {\r\n          accessedRouter.children = filterAsyncRouter(route.children)\r\n        }\r\n        accessedRouters.push(accessedRouter)\r\n      }\r\n    })\r\n  }\r\n  return accessedRouters\r\n}\r\n"]}]}