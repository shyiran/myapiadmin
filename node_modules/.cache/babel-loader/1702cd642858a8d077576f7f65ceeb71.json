{"remainingRequest":"E:\\ApiAdmin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js!E:\\ApiAdmin\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ApiAdmin\\src\\libs\\tools.js","dependencies":[{"path":"E:\\ApiAdmin\\src\\libs\\tools.js","mtime":1635783328983},{"path":"E:\\ApiAdmin\\.babelrc","mtime":1635783328909},{"path":"E:\\ApiAdmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635783567026},{"path":"E:\\ApiAdmin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1635783565708},{"path":"E:\\ApiAdmin\\node_modules\\babel-loader\\lib\\index.js","mtime":1635783561745},{"path":"E:\\ApiAdmin\\node_modules\\eslint-loader\\index.js","mtime":1635783566509}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _toConsumableArray from \"E:/ApiAdmin/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nexport var forEach = function forEach(arr, fn) {\n  if (!arr.length || !fn) return;\n  var i = -1;\n  var len = arr.length;\n\n  while (++i < len) {\n    var item = arr[i];\n    fn(item, i, arr);\n  }\n};\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\r\n */\n\nexport var getIntersection = function getIntersection(arr1, arr2) {\n  var len = Math.min(arr1.length, arr2.length);\n  var i = -1;\n  var res = [];\n\n  while (++i < len) {\n    var item = arr2[i];\n    if (arr1.indexOf(item) > -1) res.push(item);\n  }\n\n  return res;\n};\n/**\r\n * 判断当前变量是不是数组\r\n * @param param\r\n * @returns {arg is Array<any>|boolean}\r\n */\n\nexport var isArr = function isArr(param) {\n  if (typeof Array.isArray === 'function') {\n    return Array.isArray(param);\n  } else {\n    return Object.prototype.toString.call(param) === '[object Array]';\n  }\n};\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\r\n */\n\nexport var getUnion = function getUnion(arr1, arr2) {\n  return Array.from(new Set([].concat(_toConsumableArray(arr1), _toConsumableArray(arr2))));\n};\n/**\r\n * @param {Array} target 目标数组\r\n * @param {Array} arr 需要查询的数组\r\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\r\n */\n\nexport var hasOneOf = function hasOneOf(targetarr, arr) {\n  return targetarr.some(function (_) {\n    return arr.indexOf(_) > -1;\n  });\n};\n/**\r\n * @param {String|Number} value 要验证的字符串或数值\r\n * @param {*} validList 用来验证的列表\r\n */\n\nexport var oneOf = function oneOf(value, validList) {\n  for (var i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\r\n * 和PHP一样的时间戳格式化函数\r\n * @param {string} format 格式\r\n * @param {int} timestamp 要格式化的时间 默认为当前时间\r\n * @return {string}   格式化的时间字符串\r\n */\n\nexport var formatDate = function formatDate(format, timestamp) {\n  var jsDate = timestamp ? new Date(timestamp * 1000) : new Date();\n\n  var pad = function pad(n, c) {\n    if ((n = n + '').length < c) {\n      return new Array(++c - n.length).join('0') + n;\n    } else {\n      return n;\n    }\n  };\n\n  var txt_weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  var txt_ord_in = {\n    1: 'st',\n    2: 'nd',\n    3: 'rd',\n    21: 'st',\n    22: 'nd',\n    23: 'rd',\n    31: 'st'\n  };\n  var txt_months = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  var f = {\n    d: function d() {\n      return pad(f.j(), 2);\n    },\n    D: function D() {\n      return f.l().substr(0, 3);\n    },\n    j: function j() {\n      return jsDate.getDate();\n    },\n    l: function l() {\n      return txt_weekdays[f.w()];\n    },\n    N: function N() {\n      return f.w() + 1;\n    },\n    S: function S() {\n      return txt_ord_in[f.j()] ? txt_ord_in[f.j()] : 'th';\n    },\n    w: function w() {\n      return jsDate.getDay();\n    },\n    z: function z() {\n      return (jsDate - new Date(jsDate.getFullYear() + '/1/1')) / 864e5 >> 0;\n    },\n    W: function W() {\n      var a = f.z();\n      var b = 364 + f.L() - a;\n      var nd2;\n      var nd = (new Date(jsDate.getFullYear() + '/1/1').getDay() || 7) - 1;\n\n      if (b <= 2 && (jsDate.getDay() || 7) - 1 <= 2 - b) {\n        return 1;\n      } else {\n        if (a <= 2 && nd >= 4 && a >= 6 - nd) {\n          nd2 = new Date(jsDate.getFullYear() - 1 + '/12/31');\n          return date('W', Math.round(nd2.getTime() / 1000));\n        } else {\n          return 1 + (nd <= 3 ? (a + nd) / 7 : (a - (7 - nd)) / 7) >> 0;\n        }\n      }\n    },\n    F: function F() {\n      return txt_months[f.n()];\n    },\n    m: function m() {\n      return pad(f.n(), 2);\n    },\n    M: function M() {\n      return f.F().substr(0, 3);\n    },\n    n: function n() {\n      return jsDate.getMonth() + 1;\n    },\n    t: function t() {\n      var n;\n\n      if ((n = jsDate.getMonth() + 1) === 2) {\n        return 28 + f.L();\n      } else {\n        // eslint-disable-next-line no-mixed-operators\n        if (n & 1 && n < 8 || !(n & 1) && n > 7) {\n          return 31;\n        } else {\n          return 30;\n        }\n      }\n    },\n    L: function L() {\n      var y = f.Y();\n      return !(y & 3) && (y % 1e2 || !(y % 4e2)) ? 1 : 0;\n    },\n    Y: function Y() {\n      return jsDate.getFullYear();\n    },\n    y: function y() {\n      return (jsDate.getFullYear() + '').slice(2);\n    },\n    a: function a() {\n      return jsDate.getHours() > 11 ? 'pm' : 'am';\n    },\n    A: function A() {\n      return f.a().toUpperCase();\n    },\n    B: function B() {\n      var off = (jsDate.getTimezoneOffset() + 60) * 60;\n      var theSeconds = jsDate.getHours() * 3600 + jsDate.getMinutes() * 60 + jsDate.getSeconds() + off;\n      var beat = Math.floor(theSeconds / 86.4);\n      if (beat > 1000) beat -= 1000;\n      if (beat < 0) beat += 1000;\n      if (String(beat).length === 1) beat = '00' + beat;\n      if (String(beat).length === 2) beat = '0' + beat;\n      return beat;\n    },\n    g: function g() {\n      return jsDate.getHours() % 12 || 12;\n    },\n    G: function G() {\n      return jsDate.getHours();\n    },\n    h: function h() {\n      return pad(f.g(), 2);\n    },\n    H: function H() {\n      return pad(jsDate.getHours(), 2);\n    },\n    i: function i() {\n      return pad(jsDate.getMinutes(), 2);\n    },\n    s: function s() {\n      return pad(jsDate.getSeconds(), 2);\n    },\n    O: function O() {\n      var t = pad(Math.abs(jsDate.getTimezoneOffset() / 60 * 100), 4);\n      if (jsDate.getTimezoneOffset() > 0) t = '-' + t;else t = '+' + t;\n      return t;\n    },\n    P: function P() {\n      var O = f.O();\n      return O.substr(0, 3) + ':' + O.substr(3, 2);\n    },\n    c: function c() {\n      return f.Y() + '-' + f.m() + '-' + f.d() + 'T' + f.h() + ':' + f.i() + ':' + f.s() + f.P();\n    },\n    U: function U() {\n      return Math.round(jsDate.getTime() / 1000);\n    }\n  };\n  var exp = /[\\\\]?([a-zA-Z])/g;\n  return format.replace(exp, function (t, s) {\n    var ret = '';\n\n    if (t !== s) {\n      ret = s;\n    } else if (f[s]) {\n      ret = f[s]();\n    } else {\n      ret = s;\n    }\n\n    return ret;\n  });\n};\n/**\r\n * @returns {String} 当前浏览器名称\r\n */\n\nexport var getExplorer = function getExplorer() {\n  var ua = window.navigator.userAgent;\n\n  var isExplorer = function isExplorer(exp) {\n    return ua.indexOf(exp) > -1;\n  };\n\n  if (isExplorer('MSIE')) return 'IE';else if (isExplorer('Firefox')) return 'Firefox';else if (isExplorer('Chrome')) return 'Chrome';else if (isExplorer('Opera')) return 'Opera';else if (isExplorer('Safari')) return 'Safari';\n};\n/**\r\n * @description 绑定事件 on(element, event, handler)\r\n */\n\nexport var on = function () {\n  if (document.addEventListener) {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.addEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.attachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/**\r\n * @description 解绑事件 off(element, event, handler)\r\n */\n\nexport var off = function () {\n  if (document.removeEventListener) {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.removeEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.detachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/**\r\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\r\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\r\n */\n\nexport var hasKey = function hasKey(obj, key) {\n  if (key) return key in obj;else {\n    var keysArr = Object.keys(obj);\n    return keysArr.length;\n  }\n};\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\n\nexport var objEqual = function objEqual(obj1, obj2) {\n  var keysArr1 = Object.keys(obj1);\n  var keysArr2 = Object.keys(obj2);\n  if (keysArr1.length !== keysArr2.length) return false;else if (keysArr1.length === 0 && keysArr2.length === 0) return true;\n  /* eslint-disable-next-line */\n  else return !keysArr1.some(function (key) {\n    return obj1[key] != obj2[key];\n  });\n};",null]}